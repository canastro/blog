{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/ThemeContext.js","webpack:///./src/utils/typography.js","webpack:///./src/components/Layout.js","webpack:///./src/components/Seo.js","webpack:///./src/utils/theme.js","webpack:///./src/components/ThemeProvider.js","webpack:///./src/styles/prism-theme-light.js","webpack:///./src/styles/prism-theme-dark.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Bio.js"],"names":["Tags","_ref","pageContext","data","location","siteTitle","site","siteMetadata","title","tag","_data$allMarkdownRema","allMarkdownRemark","edges","totalCount","tagHeader","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_ThemeProvider__WEBPACK_IMPORTED_MODULE_3__","_components_Layout__WEBPACK_IMPORTED_MODULE_4__","_components_Seo__WEBPACK_IMPORTED_MODULE_5__","description","_components_Bio__WEBPACK_IMPORTED_MODULE_6__","map","_ref2","_node$frontmatter","node","frontmatter","path","subtitle","fullTitle","key","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","pageQuery","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","query","render","finalData","react__WEBPACK_IMPORTED_MODULE_1___default","a","Fragment","StaticQuery","props","children","Consumer","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","ThemeContext","d","__webpack_exports__","scale","rhythm","typography__WEBPACK_IMPORTED_MODULE_0__","typography__WEBPACK_IMPORTED_MODULE_0___default","n","typography_theme_wordpress_2016__WEBPACK_IMPORTED_MODULE_1__","typography_theme_wordpress_2016__WEBPACK_IMPORTED_MODULE_1___default","_emotion_core__WEBPACK_IMPORTED_MODULE_2__","Wordpress2016","googleFonts","typography","Typography","value","scaled","css","fontSize","lineHeight","styles","root","h1","h3","link","name","toggleTheme","theme","color","background","Layout","header","_useContext","useContext","__PATH_PREFIX__","pathname","startsWith","gatsby__WEBPACK_IMPORTED_MODULE_4__","aria-label","onClick","react_icons_fa__WEBPACK_IMPORTED_MODULE_5__","size","SEO","lang","meta","keywords","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","concat","length","join","_public_static_d_4017075492_json__WEBPACK_IMPORTED_MODULE_1__","defaultProps","palette","getTheme","ThemeProvider","_useTheme","storedTheme","window","localStorage","getItem","_useState","useState","setTheme","useEffect","setItem","prevTheme","useTheme","currentTheme","lightTheme","forceUpdate","document","body","classList","remove","core_browser_esm","Provider","emotion_theming_browser_esm","backgroundColor","blockquote","body.light",".container","css_browser_esm","zIndex","position","overflow","className","ProdPageRenderer","pageResources","createElement","InternalPageRenderer","assign","json","social","Bio","gatsby__WEBPACK_IMPORTED_MODULE_3__","href","twitter","target","rel","react_icons_fa__WEBPACK_IMPORTED_MODULE_4__","linkedin","stackoverflow","_public_static_d_3268991543_json__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"component---src-templates-tags-js-49254c42df56038314ca.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link, graphql} from 'gatsby';\n\nimport ThemeProvider from '../components/ThemeProvider';\nimport Layout from '../components/Layout';\nimport SEO from '../components/Seo';\nimport Bio from '../components/Bio';\n\n/**\n * Tags page\n * @param {Object} props - props\n * @returns {React.ReactNode} tags page\n */\nconst Tags = ({pageContext, data, location}) => {\n    const {title: siteTitle} = data.site.siteMetadata;\n    const {tag} = pageContext;\n    const {edges, totalCount} = data.allMarkdownRemark;\n    const tagHeader = `${totalCount} post${totalCount === 1 ? '' : 's'} tagged with \"${tag}\"`;\n\n    return (\n        <ThemeProvider>\n            <Layout location={location} title={siteTitle}>\n                <SEO title={tag} description={tagHeader} />\n                <Bio />\n                <h4>{tagHeader}</h4>\n                <ul>\n                    {edges.map(({node}) => {\n                        const {path, title, subtitle} = node.frontmatter;\n\n                        let fullTitle = title;\n                        if (subtitle) {\n                            fullTitle += ` - ${subtitle}`;\n                        }\n\n                        return (\n                            <li key={path}>\n                                <Link to={path}>{fullTitle}</Link>\n                            </li>\n                        );\n                    })}\n                </ul>\n                {/*\n              This links to a page that does not yet exist.\n              We'll come back to it!\n            */}\n                <Link to=\"/tags\">All tags</Link>\n            </Layout>\n        </ThemeProvider>\n    );\n};\n\nTags.propTypes = {\n    pageContext: PropTypes.shape({\n        tag: PropTypes.string.isRequired\n    }),\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            totalCount: PropTypes.number.isRequired,\n            edges: PropTypes.arrayOf(PropTypes.shape({\n                node: PropTypes.shape({\n                    frontmatter: PropTypes.shape({\n                        path: PropTypes.string.isRequired,\n                        title: PropTypes.string.isRequired\n                    })\n                })\n            }).isRequired)\n        }),\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                title: PropTypes.string.isRequired\n            })\n        })\n    }),\n    location: PropTypes.object.isRequired\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n    query($tag: String) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(\n            limit: 2000\n            sort: {fields: [frontmatter___date], order: DESC}\n            filter: {frontmatter: {tags: {in: [$tag]}}}\n        ) {\n            totalCount\n            edges {\n                node {\n                    frontmatter {\n                        path\n                        title\n                        subtitle\n                    }\n                }\n            }\n        }\n    }\n`;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import {createContext} from 'react';\n\nconst ThemeContext = createContext();\n\nexport default ThemeContext;\n","import Typography from 'typography';\nimport Wordpress2016 from 'typography-theme-wordpress-2016';\nimport {css} from '@emotion/core';\n\ndelete Wordpress2016.googleFonts;\n\nconst typography = new Typography(Wordpress2016);\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== 'production') {\n    typography.injectStyles();\n}\n\n/**\n * Scales a text\n * @param {Number} value - text scale\n * @returns {String} css\n */\nexport const scale = (value) => {\n    const scaled = typography.scale(value);\n\n    return css`\n        font-size: ${scaled.fontSize};\n        line-height: ${scaled.lineHeight};\n    `;\n};\n\nexport const {rhythm} = typography;\nexport default typography;\n","import React, {useContext} from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'gatsby';\nimport {css} from '@emotion/core';\nimport {FaRegLightbulb, FaLightbulb} from 'react-icons/fa';\n\nimport ThemeContext from './ThemeContext';\nimport {rhythm, scale} from '../utils/typography';\n\nconst styles = {\n    root: css`\n        position: relative;\n        margin-left: auto;\n        margin-right: auto;\n        max-width: ${rhythm(30)};\n        padding: ${rhythm(1.5)} ${rhythm(3 / 4)};\n    `,\n    h1: css`\n        ${scale(1.25)}\n        margin-bottom: ${rhythm(1)};\n        margin-top: 0;\n    `,\n    h3: css`\n        font-family: Montserrat, sans-serif;\n        margin-top: 0;\n        margin-bottom: ${rhythm(-1)};\n    `,\n    link: css`\n        box-shadow: none;\n        text-decoration: none;\n        color: inherit;\n    `,\n    toggleTheme: theme => css`\n        position: absolute;\n        right: 0;\n        top: ${rhythm(2)};\n        border: 0;\n        background: ${theme.color};\n        color: ${theme.background};\n        height: 30px;\n        width: 30px;\n        border-radius: 50%;\n    `\n};\n\n/**\n * Builds the base page layout\n * @param {Object} props - component props\n * @returns {React.ReactNode} - node\n */\nconst Layout = ({location, title, children}) => {\n    const {theme, toggleTheme} = useContext(ThemeContext);\n\n    const rootPath = `${__PATH_PREFIX__}/`;\n    const tagsPath = `${__PATH_PREFIX__}/tags`;\n    let header;\n\n    if (rootPath === location.pathname || location.pathname.startsWith(tagsPath)) {\n        header = (\n            <h1 css={styles.h1}>\n                <Link css={styles.link} to=\"/\">\n                    {title}\n                </Link>\n            </h1>\n        );\n    } else {\n        header = (\n            <h3 css={styles.h3}>\n                <Link css={styles.link} to=\"/\">\n                    {title}\n                </Link>\n            </h3>\n        );\n    }\n    return (\n        <div css={styles.root}>\n            {header}\n            <button aria-label=\"Switch between Dark and Light mode\" css={styles.toggleTheme} onClick={toggleTheme}>\n                {theme === 'light' ? (\n                    <FaLightbulb size=\"0.75rem\" />\n                ) : (\n                    <FaRegLightbulb size=\"0.75rem\" />\n                )}\n            </button>\n            {children}\n        </div>\n    );\n};\n\nLayout.propTypes = {\n    location: PropTypes.object.isRequired,\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired\n};\n\nexport default Layout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport {StaticQuery, graphql} from 'gatsby';\n\nconst detailsQuery = graphql`\n    query DefaultSEOQuery {\n        site {\n            siteMetadata {\n                title\n                description\n                author\n            }\n        }\n    }\n`;\n\n/**\n * Updates header for SEO purposes\n * @param {Object} props - component props\n * @returns {React.ReactNode} - node\n */\nconst SEO = ({\n    description, lang, meta, keywords, title\n}) => (\n    <StaticQuery\n        query={detailsQuery}\n        render={(data) => {\n            const metaDescription = description || data.site.siteMetadata.description;\n            return (\n                <Helmet\n                    htmlAttributes={{\n                        lang\n                    }}\n                    title={title}\n                    titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n                    meta={[\n                        {\n                            name: 'description',\n                            content: metaDescription\n                        },\n                        {\n                            property: 'og:title',\n                            content: title\n                        },\n                        {\n                            property: 'og:description',\n                            content: metaDescription\n                        },\n                        {\n                            property: 'og:type',\n                            content: 'website'\n                        },\n                        {\n                            name: 'twitter:card',\n                            content: 'summary'\n                        },\n                        {\n                            name: 'twitter:creator',\n                            content: data.site.siteMetadata.author\n                        },\n                        {\n                            name: 'twitter:title',\n                            content: title\n                        },\n                        {\n                            name: 'twitter:description',\n                            content: metaDescription\n                        }\n                    ]\n                        .concat(keywords.length > 0\n                            ? {\n                                name: 'keywords',\n                                content: keywords.join(', ')\n                            }\n                            : [])\n                        .concat(meta)}\n                />\n            );\n        }}\n    />\n);\n\nSEO.defaultProps = {\n    lang: 'en',\n    meta: [],\n    keywords: []\n};\n\nSEO.propTypes = {\n    description: PropTypes.string,\n    lang: PropTypes.string,\n    meta: PropTypes.array,\n    keywords: PropTypes.arrayOf(PropTypes.string),\n    title: PropTypes.string.isRequired\n};\n\nexport default SEO;\n","import {useState, useEffect} from 'react';\n\nexport const palette = {\n    black: '#222222',\n    orange: '#f29d0b',\n    paleGrey: '#f1f5f7',\n    white: '#fff',\n    blue: '#007acc'\n};\n\nexport const getTheme = theme =>\n    (theme === 'light'\n        ? {\n            background: palette.white,\n            color: palette.black,\n            link: palette.blue\n        }\n        : {\n            background: palette.black,\n            color: palette.paleGrey,\n            link: palette.orange\n        });\n\n/**\n * A hook to get and update the current theme for dark mode\n * @returns [theme, toggleTheme] - [current theme, function to toggle theme]\n */\nexport const useTheme = () => {\n    const storedTheme = typeof window !== 'undefined' && window.localStorage.getItem('theme');\n    const [theme, setTheme] = useState(storedTheme || 'dark');\n    const toggleTheme = () => setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));\n    useEffect(() => {\n        if (typeof window !== 'undefined') {\n            window.localStorage.setItem('theme', theme);\n        }\n    }, [theme]);\n    return [theme, toggleTheme];\n};\n","import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {ThemeProvider as EmotionThemeProvider} from 'emotion-theming';\nimport {Global, css} from '@emotion/core';\n\nimport ThemeContext from './ThemeContext';\nimport {useTheme, getTheme} from '../utils/theme';\nimport PRISM_THEME_LIGHT from '../styles/prism-theme-light';\nimport PRISM_THEME_DARK from '../styles/prism-theme-dark';\n\nconst ThemeProvider = ({children}) => {\n    const [theme, toggleTheme] = useTheme();\n    const currentTheme = getTheme(theme);\n    const lightTheme = getTheme('light');\n    const {color} = currentTheme;\n    const [key, forceUpdate] = useState(0);\n\n    useEffect(() => {\n        // let react take care of dynamic styles\n        forceUpdate(1);\n        // after mounting, remove the class from body\n        document.body.classList.remove('dark');\n    }, []);\n\n    return (\n        <ThemeContext.Provider value={{theme, toggleTheme}}>\n            <EmotionThemeProvider theme={currentTheme}>\n                <Global\n                    styles={css({\n                        body: {\n                            // for rubber band effect in Chrome on MacOS\n                            // and outside the scaled div with background color\n                            backgroundColor: currentTheme.background\n                        },\n                        a: {color: currentTheme.link},\n                        blockquote: {color},\n                        'body.light': {\n                            '.container': {\n                                background: lightTheme.background,\n                                color: lightTheme.color\n                            }\n                        }\n                    })}\n                />\n                <Global styles={css(theme === 'light' ? PRISM_THEME_LIGHT : PRISM_THEME_DARK)} />\n                <div\n                    css={{\n                        color,\n                        zIndex: 1,\n                        position: 'relative',\n                        overflow: 'hidden'\n                    }}\n                    className=\"container\"\n                    key={key}\n                >\n                    {children}\n                </div>\n            </EmotionThemeProvider>\n        </ThemeContext.Provider>\n    );\n};\n\nThemeProvider.propTypes = {\n    children: PropTypes.node.isRequired\n};\n\nexport default ThemeProvider;\n","export default `\n\tcode[class*='language-'],\n\tpre[class*='language-'] {\n\t\tcolor: #657b83; /* base00 */\n\t\tfont-family: 'Fira Mono', Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n\t\tfont-size: 16px;\n\t\ttext-align: left;\n\t\twhite-space: pre;\n\t\tword-spacing: normal;\n\t\tword-break: normal;\n\t\tword-wrap: normal;\n\t\ttransition: 0.4s ease;\n\n\t\tline-height: 1.65;\n\n\t\t-moz-tab-size: 2;\n\t\t-o-tab-size: 2;\n\t\ttab-size: 2;\n\n\t\t-webkit-hyphens: none;\n\t\t-moz-hyphens: none;\n\t\t-ms-hyphens: none;\n\t\thyphens: none;\n\t}\n\n\tpre[class*='language-']::-moz-selection,\n\tpre[class*='language-'] ::-moz-selection,\n\tcode[class*='language-']::-moz-selection,\n\tcode[class*='language-'] ::-moz-selection {\n\t\tbackground: #eee8d5; /* base02 */\n\t}\n\n\tpre[class*='language-']::selection,\n\tpre[class*='language-'] ::selection,\n\tcode[class*='language-']::selection,\n\tcode[class*='language-'] ::selection {\n\t\tbackground: #eee8d5; /* base02 */\n\t}\n\n\t/* Code blocks */\n\tpre[class*='language-'] {\n\t\tpadding: 1em;\n\t\tmargin: 0.5em 0 1.5em 0;\n\t\toverflow: auto;\n\t\tborder-radius: 0.3em;\n\t}\n\n\t:not(pre) > code[class*='language-'],\n\tpre[class*='language-'] {\n\t\tbackground-color: rgba(253,246,227,0.5);\n\t}\n\n\t/* handle initial background for dark mode separately to avoid flashing eyes at night */\n\tbody.dark :not(pre) > code[class*='language-'],\n\tbody.dark pre[class*='language-'] {\n\t\tbackground-color: rgba(255, 255, 255, 0.05);\n\t}\n\n\t/* Inline code */\n\t:not(pre) > code[class*='language-'] {\n\t\tcolor: #6c71c4;\n\t\tpadding: 0.1em;\n\t\tborder-radius: 0.3em;\n\t}\n\n\t.token.comment,\n\t.token.prolog,\n\t.token.doctype,\n\t.token.cdata {\n\t\tcolor: #93a1a1; /* base1 */\n\t}\n\n\t.token.punctuation {\n\t\tcolor: #586e75; /* base01 */\n\t}\n\n\t.namespace {\n\t\topacity: 0.7;\n\t}\n\n\t.token.property,\n\t.token.tag,\n\t.token.boolean,\n\t.token.number,\n\t.token.constant,\n\t.token.symbol,\n\t.token.deleted {\n\t\tcolor: #268bd2; /* blue */\n\t}\n\n\t.token.selector,\n\t.token.attr-name,\n\t.token.string,\n\t.token.char,\n\t.token.builtin,\n\t.token.url,\n\t.token.inserted {\n\t\tcolor: #2aa198; /* cyan */\n\t}\n\n\t.token.entity {\n\t\tcolor: #657b83; /* base00 */\n\t\tbackground: #eee8d5; /* base2 */\n\t}\n\n\t.token.atrule,\n\t.token.attr-value {\n\t\tcolor: #859900;\n\t}\n\n\t.token.keyword {\n\t\tcolor: #d33682;\n\t\tfont-style: italic;\n\t}\n\n\t.token.function,\n\t.token.class-name {\n\t\tcolor: #b58900; /* yellow */\n\t}\n\n\t.token.regex,\n\t.token.important,\n\t.token.variable {\n\t\tcolor: #cb4b16; /* orange */\n\t}\n\n\t.token.important,\n\t.token.bold {\n\t\tfont-weight: bold;\n\t}\n\t.token.italic {\n\t\tfont-style: italic;\n\t}\n\n\t.token.entity {\n\t\tcursor: help;\n\t}\n\n\t.gatsby-highlight-code-line {\n\t\tbackground-color: #feb;\n\t\tdisplay: block;\n\t\tmargin-right: -1em;\n\t\tmargin-left: -1em;\n\t\tpadding-right: 1em;\n\t\tpadding-left: 0.75em;\n\t\tborder-left: 0.25em solid #f99;\n\t}\n\n\t/**\n\t * Add back the container background-color, border-radius, padding, margin\n\t * and overflow that we removed from <pre>.\n\t */\n\t.gatsby-highlight {\n\t\tbackground-color: rgba(253,246,227,0.5);\n\t\tborder-radius: 0.3em;\n\t\tmargin: 0.5em 0 1.5em 0;\n\t\tpadding: 1em;\n\t\toverflow: auto;\n\t}\n\n\t/**\n\t * Remove the default PrismJS theme background-color, border-radius, margin,\n\t * padding and overflow.\n\t * 1. Make the element just wide enough to fit its content.\n\t * 2. Always fill the visible space in .gatsby-highlight.\n\t * 3. Adjust the position of the line numbers\n\t */\n\t.gatsby-highlight pre[class*=\"language-\"] {\n\t\tbackground-color: transparent;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\toverflow: initial;\n\t\tfloat: left; /* 1 */\n\t\tmin-width: 100%; /* 2 */\n\t}\n`;\n","export default `\n\tcode[class*='language-'],\n\tpre[class*='language-'] {\n\t\tcolor: #e3e8ff; /* base00 */\n\t\tfont-family: 'Fira Mono', Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n\t\tfont-size: 16px;\n\t\ttext-align: left;\n\t\twhite-space: pre;\n\t\tword-spacing: normal;\n\t\tword-break: normal;\n\t\tword-wrap: normal;\n\t\ttransition: 0.4s ease;\n\n\t\tline-height: 1.65;\n\n\t\t-moz-tab-size: 2;\n\t\t-o-tab-size: 2;\n\t\ttab-size: 2;\n\n\t\t-webkit-hyphens: none;\n\t\t-moz-hyphens: none;\n\t\t-ms-hyphens: none;\n\t\thyphens: none;\n\t}\n\n\tpre[class*='language-']::-moz-selection,\n\tpre[class*='language-'] ::-moz-selection,\n\tcode[class*='language-']::-moz-selection,\n\tcode[class*='language-'] ::-moz-selection {\n\t\tbackground: rgba(255, 255, 255, 0.09); /* base02 */\n\t}\n\n\tpre[class*='language-']::selection,\n\tpre[class*='language-'] ::selection,\n\tcode[class*='language-']::selection,\n\tcode[class*='language-'] ::selection {\n\t\tbackground: rgba(255, 255, 255, 0.09); /* base02 */\n\t}\n\n\t/* Code blocks */\n\tpre[class*='language-'] {\n\t\tpadding: 1em;\n\t\tmargin: 0.5em 0 1.5em 0;\n\t\toverflow: auto;\n\t\tborder-radius: 0.3em;\n\t}\n\n\t:not(pre) > code[class*='language-'],\n\tpre[class*='language-'] {\n\t\tbackground-color: rgba(255, 255, 255, 0.05);\n\t}\n\n\t/* Inline code */\n\t:not(pre) > code[class*='language-'] {\n\t\tcolor: #84ffff;\n\t\tpadding: 0.1em;\n\t\tborder-radius: 0.3em;\n\t}\n\n\t.token.comment,\n\t.token.prolog,\n\t.token.doctype,\n\t.token.cdata {\n\t\tcolor: rgba(227,232,255,0.5); /* base1 */\n\t}\n\n\t.token.punctuation {\n\t\tcolor: rgba(227,232,255,0.6); /* base01 */\n\t}\n\n\t.namespace {\n\t\topacity: 0.7;\n\t}\n\n\t.token.property,\n\t.token.tag,\n\t.token.boolean,\n\t.token.number {\n\t\tcolor: #82aaff;\n\t}\n\n\t.token.constant,\n\t.token.symbol,\n\t.token.deleted {\n\t\tcolor: #c792ea /* blue */\n\t}\n\n\t.token.selector,\n\t.token.attr-name,\n\t.token.string,\n\t.token.char,\n\t.token.builtin,\n\t.token.url,\n\t.token.inserted {\n\t\tcolor: #c3e88d; /* cyan */\n\t}\n\n\t.token.entity {\n\t\tcolor: rgba(227,232,255,0.7);\n\t\tbackground: rgba(255, 255, 255, 0.05);\n\t}\n\n\t.token.atrule,\n\t.token.attr-value {\n\t\tcolor: #80cbc4;\n\t}\n\n\t.token.keyword {\n\t\tcolor: #f07178;\n\t\tfont-style: italic;\n\t}\n\n\t.token.function,\n\t.token.class-name {\n\t\tcolor: #ffcb6b; /* yellow */\n\t}\n\n\t.token.regex,\n\t.token.important,\n\t.token.variable {\n\t\tcolor: #f78c6c; /* orange */\n\t}\n\n\t.token.important,\n\t.token.bold {\n\t\tfont-weight: bold;\n\t}\n\t.token.italic {\n\t\tfont-style: italic;\n\t}\n\n\t.token.entity {\n\t\tcursor: help;\n\t}\n\n\t.gatsby-highlight-code-line {\n\t\t/* Use a hex code since rgba causes weird overlays with multiple highlighted lines */\n\t\tbackground-color: #393939;\n\t\tdisplay: block;\n\t\tmargin-right: -1em;\n\t\tmargin-left: -1em;\n\t\tpadding-right: 1em;\n\t\tpadding-left: 0.75em;\n\t\tborder-left: 0.25em solid #f78c6c;\n\t}\n\n\t/**\n\t * Add back the container background-color, border-radius, padding, margin\n\t * and overflow that we removed from <pre>.\n\t */\n\t.gatsby-highlight {\n\t\tbackground-color: rgba(255, 255, 255, 0.05);\n\t\tborder-radius: 0.3em;\n\t\tmargin: 0.5em 0 1.5em 0;\n\t\tpadding: 1em;\n\t\toverflow: auto;\n\t}\n\n\t/**\n\t * Remove the default PrismJS theme background-color, border-radius, margin,\n\t * padding and overflow.\n\t * 1. Make the element just wide enough to fit its content.\n\t * 2. Always fill the visible space in .gatsby-highlight.\n\t * 3. Adjust the position of the line numbers\n\t */\n\t.gatsby-highlight pre[class*=\"language-\"] {\n\t\tbackground-color: transparent;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\toverflow: initial;\n\t\tfloat: left; /* 1 */\n\t\tmin-width: 100%; /* 2 */\n\t}\n`;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react';\nimport {StaticQuery, graphql} from 'gatsby';\nimport {FaTwitter, FaStackOverflow, FaLinkedin} from 'react-icons/fa';\nimport {css} from '@emotion/core';\n\nimport {rhythm} from '../utils/typography';\n\nconst styles = {\n    root: css`\n        display: flex;\n        flex-direction: column;\n        margin-bottom: ${rhythm(1)};\n    `,\n    social: css`\n        display: flex;\n        justify-content: space-around;\n        width: 150px;\n        align-self: center;\n    `\n};\n\nconst bioQuery = graphql`\n    query BioQuery {\n        site {\n            siteMetadata {\n                author\n                social {\n                    linkedin\n                    stackoverflow\n                    twitter\n                }\n            }\n        }\n    }\n`;\n\n/**\n * Builds the Bio section\n * @returns {React.ReactNode} node\n */\nconst Bio = () => (\n    <StaticQuery\n        query={bioQuery}\n        render={(data) => {\n            const {social} = data.site.siteMetadata;\n            return (\n                <div css={styles.root}>\n                    <div css={styles.social}>\n                        <a\n                            title=\"twitter\"\n                            href={social.twitter}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <FaTwitter />\n                        </a>\n                        <a\n                            title=\"linkedin\"\n                            href={social.linkedin}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <FaLinkedin />\n                        </a>\n                        <a\n                            title=\"stackoverflow\"\n                            href={social.stackoverflow}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <FaStackOverflow />\n                        </a>\n                    </div>\n                </div>\n            );\n        }}\n    />\n);\n\nexport default Bio;\n"],"sourceRoot":""}