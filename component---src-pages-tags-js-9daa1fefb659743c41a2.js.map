{"version":3,"sources":["webpack:///./src/pages/tags.js"],"names":["TagsPage","_ref","data","location","group","allMarkdownRemark","_data$site$siteMetada","site","siteMetadata","title","keywords","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_Layout__WEBPACK_IMPORTED_MODULE_6__","_components_Seo__WEBPACK_IMPORTED_MODULE_7__","_components_Bio__WEBPACK_IMPORTED_MODULE_5__","map","tag","key","fieldValue","gatsby__WEBPACK_IMPORTED_MODULE_3__","to","kebabCase","totalCount","propTypes","PropTypes","shape","arrayOf","string","isRequired","number","object","pageQuery"],"mappings":"iOAiBMA,EAAW,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,SACdC,EAASF,EAAKG,kBAAdD,MAD4BE,EAETJ,EAAKK,KAAKC,aAA7BC,EAF4BH,EAE5BG,MAAOC,EAFqBJ,EAErBI,SAEd,OACIC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAQV,SAAUA,EAAUM,MAAOA,GAC/BE,OAAAC,EAAA,EAAAD,CAACG,EAAA,EAAD,CAAKL,MAAM,WAAWC,SAAUA,IAChCC,OAAAC,EAAA,EAAAD,CAACI,EAAA,EAAD,MACAJ,OAAAC,EAAA,EAAAD,CAAA,WACIA,OAAAC,EAAA,EAAAD,CAAA,kBACAA,OAAAC,EAAA,EAAAD,CAAA,UACKP,EAAMY,IAAI,SAAAC,GAAG,OACVN,OAAAC,EAAA,EAAAD,CAAA,MAAIO,IAAKD,EAAIE,YACTR,OAAAC,EAAA,EAAAD,CAACS,EAAA,KAAD,CAAMC,GAAE,SAAWC,IAAUL,EAAIE,YAAzB,KACHF,EAAIE,WADT,KACuBF,EAAIM,WAD3B,YAW5BvB,EAASwB,UAAY,CACjBtB,KAAMuB,IAAUC,MAAM,CAClBrB,kBAAmBoB,IAAUC,MAAM,CAC/BtB,MAAOqB,IAAUE,QAAQF,IAAUC,MAAM,CACrCP,WAAYM,IAAUG,OAAOC,WAC7BN,WAAYE,IAAUK,OAAOD,aAC9BA,cAEPtB,KAAMkB,IAAUC,MAAM,CAClBlB,aAAciB,IAAUC,MAAM,CAC1BjB,MAAOgB,IAAUG,OAAOC,iBAIpC1B,SAAUsB,IAAUM,OAAOF,YAGhB7B,YAER,IAAMgC,EAAS","file":"component---src-pages-tags-js-9daa1fefb659743c41a2.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link, graphql} from 'gatsby';\n\n// Utilities\nimport kebabCase from 'lodash/kebabCase';\n\n// Components\nimport Bio from '../components/Bio';\nimport Layout from '../components/Layout';\nimport SEO from '../components/Seo';\n\n/**\n *\n * @param {Object} props - props\n * @returns {React.ReactNode} - node\n */\nconst TagsPage = ({data, location}) => {\n    const {group} = data.allMarkdownRemark;\n    const {title, keywords} = data.site.siteMetadata;\n\n    return (\n        <Layout location={location} title={title}>\n            <SEO title=\"All tags\" keywords={keywords} />\n            <Bio />\n            <div>\n                <h4>Tags</h4>\n                <ul>\n                    {group.map(tag => (\n                        <li key={tag.fieldValue}>\n                            <Link to={`/tags/${kebabCase(tag.fieldValue)}/`}>\n                                {tag.fieldValue} ({tag.totalCount})\n                            </Link>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </Layout>\n    );\n};\n\nTagsPage.propTypes = {\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            group: PropTypes.arrayOf(PropTypes.shape({\n                fieldValue: PropTypes.string.isRequired,\n                totalCount: PropTypes.number.isRequired\n            }).isRequired)\n        }),\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                title: PropTypes.string.isRequired\n            })\n        })\n    }),\n    location: PropTypes.object.isRequired\n};\n\nexport default TagsPage;\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n                keywords\n            }\n        }\n        allMarkdownRemark(limit: 2000, filter: {frontmatter: {draft: {ne: true}}}) {\n            group(field: frontmatter___tags) {\n                fieldValue\n                totalCount\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}