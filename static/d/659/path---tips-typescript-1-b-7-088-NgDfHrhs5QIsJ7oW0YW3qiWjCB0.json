{"data":{"site":{"siteMetadata":{"title":"Canastro's notes","author":"Ricardo Canastro"}},"markdownRemark":{"id":"3b5cb92a-9e9e-5faf-86a7-4a9c5056e4ee","excerpt":"I am by no means a typescript expert, I am a TS newbie that wants to catalog his most interesting and useful foundings. I hope that with these tips I help you…","html":"<p>I am by no means a typescript expert, I am a TS newbie that wants to catalog his most interesting and useful foundings. I hope that with these tips I help you avoid the use of <code class=\"language-text\">any</code> because fuck it.</p>\n<h1>Types vs Interfaces</h1>\n<p>This one is discussed a lot, but I think it still is confusing.\nTODO: </p>\n<h1>Create ReadOnly and Partial Types</h1>\n<p>Image you’re creating a lib for alot of other users to consume. You might have a static configuration object, but as your lib adoption increases the amount of different use cases will increase, so you might want to give the possibility of overriding your configuration. </p>\n<p>Lets use our react ui-kit created on the previous post:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type Palette <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  white<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n  grey<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n  black<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n  primary<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n  secondary<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> defaultPalette <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  white<span class=\"token punctuation\">:</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">,</span>\n  grey<span class=\"token punctuation\">:</span> <span class=\"token string\">'#f7f9fa'</span><span class=\"token punctuation\">,</span>\n  black<span class=\"token punctuation\">:</span> <span class=\"token string\">'#222'</span><span class=\"token punctuation\">,</span>\n  primary<span class=\"token punctuation\">:</span> <span class=\"token string\">'#6d30e7'</span><span class=\"token punctuation\">,</span>\n  secondary<span class=\"token punctuation\">:</span> <span class=\"token string\">'#dfdded'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> createTheme <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>overrides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Palette <span class=\"token operator\">=></span> \n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> defaultPalette<span class=\"token punctuation\">,</span> overrides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You want to give the user the possibility to partially override the default palette, but how do you create a type for that without having to replicate the Palette type just adding a question mark to all properties?</p>\n<p>Well, the answer is <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html\">Mapped Types</a>. Mapped types is a pretty powerfull tool and can help you in some other scenarios besides this, in this case you would create a new type from the Palette just adding a modifier to add the optional character:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type PaletteInput <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> keyof Palette<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Palette<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can make this more reusable by creating:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  readonly <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ntype Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And using it so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type PaletteInput <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>Palette<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"Typescript tips","subtitle":"A beginner's notes","date":"January 07, 2019"}}},"pageContext":{"tags":[{"text":"react","link":"/tags/react/"},{"text":"typescript","link":"/tags/typescript/"}],"slug":"/2019-01-07---tips-typescript/","previous":{"fields":{"slug":"/2019-01-02---react-ui-lib-part2/"},"frontmatter":{"title":"Part 2 - Creating a react ui-ki","path":"/2019-01-02---react-ui-lib-part2","tags":["react","typescript","storybook","styled-components"]}},"next":null}}