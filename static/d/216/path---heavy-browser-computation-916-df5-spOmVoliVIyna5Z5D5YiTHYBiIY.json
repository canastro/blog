{"data":{"site":{"siteMetadata":{"title":"Canastro's notes","author":"Ricardo Canastro"}},"markdownRemark":{"id":"e412d619-ae28-57e6-82e4-11c8b269db87","excerpt":"At  dashdash  we build spreadsheets with super-powers, we aim to create tools that make computation accessible to everyone. Our spreadsheet supports the…","html":"<p>At <a href=\"https://www.dashdash.com\">dashdash</a> we build spreadsheets with super-powers, we aim to create tools that make computation accessible to everyone.</p>\n<p>Our spreadsheet supports the standard excel formulas, external API integration formulas and some dashdash formulas that allow you to integrate any API through GET and POST requests. Given this flexibility most of our computation has to be done in the backend, but not all of it. For the regular formulas that do not require HTTP requests to be fired, we could easily do them in the frontend.</p>\n<p>Currently we do all the computation on the backend, that means that even the “trival” operations such as arithemetical operations need to go the backend, and these are operations should feel immediate.</p>\n<h1>Optimistic Updates</h1>\n<p>One of the big challenges we have is what we call <strong>double computation</strong>. We want to do frontend optimistic updates to the basic operations (which do not include external requests) while still firing the backend requests to persist the computed values and then match and merge the results in the frontend.</p>\n<p>While most users have simple spreadsheets and their cell dependencies graph is rather simple, we don’t pose limits, and therefore the complexity of computation is unknown. If a user edits a cell that might have a ripple effect on thousands other cells… If we execute those operations by iterating each affected cell / formula we’ll completely freeze the browser and provide a terrible user experience.</p>\n<h1>Requirements</h1>\n<p>Our solution for the frontend computation should match the following requirements:</p>\n<ul>\n<li>No dropped frames, the page should be responsive at all times</li>\n<li>Processing should be interruptable (either because new data was introduced or user wants to leave the page)</li>\n<li>UI should be updated only when full computation is complete (we don’t want stale data to be presented)</li>\n<li>Should be as fast as possible given the previous constraints (if we split execution in chunks it will take a bit longer to process but the page will be responsive, and therefore the perceived perfomance will appear to be better)</li>\n<li>Relatively easy to maintain and to reason with</li>\n</ul>\n<h1>How to test our solutions</h1>\n<ul>\n<li>Create a simple example;</li>\n<li>Use <a href=\"https://github.com/sw-yx/async-render-toolbox\">async-render-toolbox</a> chrome extensions to have a visual cue of the CPU lag;</li>\n<li>Create a counter and a timer to make sure page is still interactive while processing a queue;</li>\n<li>Use devtools for some extra performance inspection;</li>\n</ul>\n<h1>Test case</h1>\n<p>A spreadsheet in which A1=99 and each row from A2 to A2000000 adds 10 the previous row. A2 will be computed to 109, A3 to 119, etc. A2000000 will be <code class=\"language-text\">99 + (10 * 1 999 999) = 20 000 089</code>. As you can imagine, changing the value of A1 will have a ripple effect and 1999 calcs would have to be done, <strong>sequentially</strong>. </p>\n<p>We need to define a datastructure and a traversal algorithm to test our solutions. Since the problem we’re tackling is only related with high CPU usage, we can easily create this scenario without a complex algorithm or data strucuture. Given a object with each cell indexed by id, we’re going to start computation by the cell A1 and then get the next child until we find a cell without child.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">A1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">'A1'</span><span class=\"token punctuation\">,</span>\n    child<span class=\"token punctuation\">:</span> <span class=\"token string\">'A2'</span><span class=\"token punctuation\">,</span>\n    formula<span class=\"token punctuation\">:</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token number\">99</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">A2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">'A2'</span><span class=\"token punctuation\">,</span>\n    child<span class=\"token punctuation\">:</span> <span class=\"token string\">'A3'</span><span class=\"token punctuation\">,</span>\n    formula<span class=\"token punctuation\">:</span> <span class=\"token string\">'=A1+10'</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token constant\">A2000000</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">'A2000000'</span><span class=\"token punctuation\">,</span>\n    child<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    formula<span class=\"token punctuation\">:</span> <span class=\"token string\">'=A1999999+10'</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In each iteration we’re going to update the value of the cell and then move to the next one.</p>\n<h1>Approach</h1>\n<p>There are a few possible aproaches that we’ll want to explore and each will have their own trade-offs. In this blog post I’ll explore one in particular, the usage of <strong>cpu idle callbacks to schedule work</strong>, inspired by react’s scheduler.</p>\n<p>This is our dummy computation function. It’s pretty much hardcoded and does not reflect the real operation. This function extracts the id of the cell in the formula, adds 10 to the value of the referred cell and update the current cell value: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> formula <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> nextUnitOfWork<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> isFormula <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>formula <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isFormula<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> parentId <span class=\"token operator\">=</span> formula<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/A\\d*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hardcoded stuff</span>\n        <span class=\"token keyword\">const</span> previousValue <span class=\"token operator\">=</span> spreadsheet<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>parentId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> newValue <span class=\"token operator\">=</span> previousValue <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        spreadsheet<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>nextUnitOfWork<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextUnitOfWork<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/** \n     * Keeping the triggerId will allow us to know at all times \n     * which cell triggered the current computation\n     */</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> \n      triggerId<span class=\"token punctuation\">:</span> nextUnitOfWork<span class=\"token punctuation\">.</span>triggerId<span class=\"token punctuation\">,</span> \n      task<span class=\"token punctuation\">:</span> spreadsheet<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>nextUnitOfWork<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">]</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>How we would we do this with a regular <code class=\"language-text\">while</code> loop:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> task <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> trigger<span class=\"token punctuation\">:</span> task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> task <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>With a simple requestIdleCallback scheduler:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * How long we think that we need to have to be able \n * to process a single unit of work\n * We might need to tweak this.\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ENOUGH_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// in ms</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">resetNextUnitOfWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>task<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> triggerId<span class=\"token punctuation\">:</span> task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> task <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span>deadline<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextUnitOfWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resetNextUnitOfWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextUnitOfWork <span class=\"token operator\">&amp;&amp;</span> deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token constant\">ENOUGH_TIME</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">performWork</span><span class=\"token punctuation\">(</span>deadline<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span>deadline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextUnitOfWork <span class=\"token operator\">||</span> workQueue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>performWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">scheduleWork</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** \n   * Verify if there is already a work being \n   * process that was triggered by the same cell\n   */</span>\n  <span class=\"token keyword\">const</span> isInProgress <span class=\"token operator\">=</span> \n    nextUnitOfWork <span class=\"token operator\">&amp;&amp;</span> \n    nextUnitOfWork<span class=\"token punctuation\">.</span>triggerId <span class=\"token operator\">===</span> task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>performWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This approach works by adding tasks to a workQueue, a task is usually a cell that was changed and that will have effect on the cells that depend on it. First we check if there is already a work in progress that was triggered by the newly schedule work, if so that should be stoped and re-added to the end of the workQueue. After updating the queue, a callback to perform work is passed to the <strong>requestIdleCallback</strong>.</p>\n<p>When we get a slot of idle time, the function <strong>performWork</strong> is called, this function calls the <strong>workLoop</strong> which is responsible to get the next task in the workQueue and then do a while loop to <strong>performUnitOfWork</strong> while we still have idle time left. The <strong>performUnitOfWork</strong> does the formula computation and returns the child of the current cell, that child is assinged to the <strong>nextUnitOfWork</strong>. Once theres no more time to process more cells, the performWork function will schedule a <strong>requestIdleCallback</strong> to pickup the work on the next cpu idle time.</p>\n<p>This loop will keep going on until there are no more nextUnitOfWork or items in the workQueue.</p>\n<h1>Results</h1>\n<p>The blocking iteration approach is much faster to execute, but, as visible in <strong>fig. 1</strong> it has a lot of drop frames. The page would be unresponsive for a second there. The idle callback approach takes longer to execute, its time of execution is not predictable as it depends on how busy the CPU is, but the page is responsive at all times (<strong>fig. 2</strong>) and therefore the perceived performance might be much better.</p>\n<div class=\"gallery\">\n  <div class=\"gallery__item\">\n    <img src=\"/regular-radar-only-e38b913c481a88a368c2d2506b584554.gif\">\n    <label><strong>fig. 1:</strong> with while loop</label>\n  </div>\n  <div class=\"gallery__item\">\n    <img src=\"/idle-radar-only-302b9a609f2bf8289228abbb0fe1145b.gif\">\n    <label><strong>fig. 2:</strong> with idle callback</label>\n  </div>\n</div>\n<h1>Conclusion</h1>\n<p>In this isolated test it seems that the approach with <strong>requestIdleCallback</strong> checks our requirements, but a example integrated with a complex React application will have to be done. This is a similar technique to what Concurrent React will use, and I’m not quite sure how well this will play-out with react’s scheduling low priority updates for idle periods.</p>\n<p>You can check this <a href=\"https://github.com/canastro/heavy-fe-computation\">github repo</a> with all the approaches that we’ll try out before a final decision is taken.</p>","frontmatter":{"title":"A spike about heavy browser computation","subtitle":"Schedule work with requestIdleCallback","date":"January 11, 2019"}}},"pageContext":{"tags":[{"text":"javascript","link":"/tags/javascript/"},{"text":"dashdash","link":"/tags/dashdash/"}],"slug":"/2019-01-11---heavy-browser-computation/","previous":{"fields":{"slug":"/2019-01-09---ts-extend-modify/"},"frontmatter":{"title":"Typescript - Extending and modifying existing types with Mapped Types","path":"/ts-mapped-types","tags":["react","typescript"]}},"next":null}}