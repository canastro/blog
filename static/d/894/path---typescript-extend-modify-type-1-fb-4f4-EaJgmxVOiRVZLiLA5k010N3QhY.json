{"data":{"site":{"siteMetadata":{"title":"Canastro's notes","author":"Ricardo Canastro"}},"markdownRemark":{"id":"0f581c94-880f-588c-8336-92c75a8d5666","excerpt":"I am by no means a typescript expert, I am a TS newbie that wants to catalog his most interesting and useful findings.  Modify to a type Lets think in the…","html":"<p>I am by no means a typescript expert, I am a TS newbie that wants to catalog his most interesting and useful findings. </p>\n<h1>Modify to a type</h1>\n<p>Lets think in the following scenario: you’re creating a lib that hopefuly alot of other devs will use to build their apps. You might have a static theme configuration object, but sooner or later your users will ask you to provide a way to override some parts of that theme.</p>\n<p>Picking up on the react ui-kit we created on the previous post we have:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type Palette <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  white<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n  grey<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n  black<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n  primary<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n  secondary<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> defaultPalette <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  white<span class=\"token punctuation\">:</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">,</span>\n  grey<span class=\"token punctuation\">:</span> <span class=\"token string\">'#f7f9fa'</span><span class=\"token punctuation\">,</span>\n  black<span class=\"token punctuation\">:</span> <span class=\"token string\">'#222'</span><span class=\"token punctuation\">,</span>\n  primary<span class=\"token punctuation\">:</span> <span class=\"token string\">'#6d30e7'</span><span class=\"token punctuation\">,</span>\n  secondary<span class=\"token punctuation\">:</span> <span class=\"token string\">'#dfdded'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> createTheme <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>overrides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Palette <span class=\"token operator\">=></span> \n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> defaultPalette<span class=\"token punctuation\">,</span> overrides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It would make no sense to make it mandatory for the consumers of your lib to have to provide a complete theme object, therefore you cannot reuse the <code class=\"language-text\">Palette</code> type. Your <code class=\"language-text\">PaletteInput</code> will have to have all props marked as optional. </p>\n<p>We want to create the PaletteInput type without having to duplicate the Palette input type, because that would be harder to maintain. How can we achieve that? Well, the answer is <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html\">Mapped Types</a>. With mapped types you can iterate all the keys in a given type add some modifier to them and create a new type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type PaletteInput <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> keyof Palette<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Palette<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can make this more reusable by creating some types for some common operations:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Nullable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> \n<span class=\"token punctuation\">}</span>\n\ntype Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">+</span>readonly <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ntype Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And using it so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type PaletteInput <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>Palette<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>TODO: explain how to target specific keys</p>\n<h1>Extending a type</h1>\n<p>Lets now change our create theme, instead of receiving only the </p>","frontmatter":{"title":"Typescript - Extending and modifying existing types","subtitle":"A Typescript beginner's hard-learned lessons","date":"January 07, 2019"}}},"pageContext":{"tags":[{"text":"react","link":"/tags/react/"},{"text":"typescript","link":"/tags/typescript/"},{"text":"ts-beginners-series","link":"/tags/ts-beginners-series/"}],"slug":"/2019-01-07---ts-extend-modify/","previous":{"fields":{"slug":"/2019-01-02---react-ui-lib-part2/"},"frontmatter":{"title":"Part 2 - Creating a react ui-kit","path":"/2019-01-02---react-ui-lib-part2","tags":["react","typescript","storybook","styled-components"]}},"next":null}}