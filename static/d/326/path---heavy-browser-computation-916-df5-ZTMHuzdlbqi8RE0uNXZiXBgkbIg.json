{"data":{"site":{"siteMetadata":{"title":"Canastro's notes","author":"Ricardo Canastro"}},"markdownRemark":{"id":"e412d619-ae28-57e6-82e4-11c8b269db87","excerpt":"At  dashdash  we build spreadsheets with super-powers, we aim to create tools that make computation accessible to everyone. Our spreadsheets besides supporting…","html":"<p>At <a href=\"https://www.dashdash.com\">dashdash</a> we build spreadsheets with super-powers, we aim to create tools that make computation accessible to everyone.</p>\n<p>Our spreadsheets besides supporting the standard excel formulas, also support some external API integration formulas and some dashdash formulas that allow you to integrate any API. Given this flexibility our most of our computation most be done in the backend, but not all of it. For the regular formulas that do not require to HTTP requests to be fired, we could easily do them in the frontend.</p>\n<p>Now that we have alot of integrations we’re improving performance and responsiveness. One of the big challenges we have is what we call <strong>double computation</strong>. We want to optimistically do frontend computation of formula values, while still firing the request to the backend to do the computation. This way the basic operations will seem to be executed instantaneously.</p>\n<p>While basic users, usually have simple spreadsheets and their graph of spreadsheet cell’s dependencies is rather simple, we don’t pose limits, and therefore the complexity of computation is unknown. </p>\n<p>If a user edits a cell that will have a ripple effect that will produce 1000 operations, if we execute those operations in a tradicional manner, it will be a blocking operation and the browser will not be responsive while doing them.</p>\n<h1>Requirements</h1>\n<ul>\n<li>No dropped frames, the page should be responsive at all times</li>\n<li>Processing should be interruptable (either for new data introduced or user wants to leave the page)</li>\n</ul>","frontmatter":{"title":"Heavy browser computation","subtitle":null,"date":"January 11, 2019"}}},"pageContext":{"tags":[{"text":"react","link":"/tags/react/"},{"text":"typescript","link":"/tags/typescript/"}],"slug":"/2019-01-11---heavy-browser-computation/","previous":{"fields":{"slug":"/2019-01-09---ts-extend-modify/"},"frontmatter":{"title":"Typescript - Extending and modifying existing types with Mapped Types","path":"/ts-mapped-types","tags":["react","typescript"]}},"next":null}}