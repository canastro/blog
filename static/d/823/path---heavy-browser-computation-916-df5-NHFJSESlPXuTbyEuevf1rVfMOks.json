{"data":{"site":{"siteMetadata":{"title":"Canastro's notes","author":"Ricardo Canastro"}},"markdownRemark":{"id":"e412d619-ae28-57e6-82e4-11c8b269db87","excerpt":"At  dashdash  we build spreadsheets with super-powers, we aim to create tools that make computation accessible to everyone. Our spreadsheet supports the…","html":"<p>At <a href=\"https://www.dashdash.com\">dashdash</a> we build spreadsheets with super-powers, we aim to create tools that make computation accessible to everyone.</p>\n<p>Our spreadsheet supports the standard excel formulas, external API integration formulas and some dashdash formulas that allow you to integrate any API through GET and POST requests. Given this flexibility most of our computation has to be done in the backend, but not all of it. For the regular formulas that do not require HTTP requests to be fired, we could easily do them in the frontend.</p>\n<p>Currently we do all the computation on the backend, that means that even the “trival” operations such as arithemetical operations need to go the backend, and these are operations should feel immediate.</p>\n<h1>Optimistic Updates</h1>\n<p>One of the big challenges we have is what we call <strong>double computation</strong>. We want to do frontend optimistic updates to the basic operations (which do not include external requests) while still firing the backend requests to persist the computed values and then match and merge the results in the frontend.</p>\n<p>While basic users, usually have simple spreadsheets and their cell dependencies graph is rather simple, we don’t pose limits, and therefore the complexity of computation is unknown. If a user edits a cell that has a ripple effect that affets thousands other cells, that will produce some heavy computation on the frontend. If we execute those operations by iterating a array of operations or with a recursive method, it will be a blocking operation and the browser will not be responsive during that process.</p>\n<h1>Requirements</h1>\n<p>Our solution for the frontend computation should match the following requirements:</p>\n<ul>\n<li>No dropped frames, the page should be responsive at all times</li>\n<li>Processing should be interruptable (either because new data was introduced or user wants to leave the page)</li>\n<li>UI should be updated only when full computation is complete (we don’t want stale data to be presented)</li>\n<li>Should be as fast as possible given the previous constraints (if we split execution in chunks it will take a bit longer to process but the page will be responsive, and therefore the perceived perfomance will appear to be better)</li>\n<li>Relatively easy to maintain and to reason with</li>\n</ul>\n<h1>How to test our solutions</h1>\n<ul>\n<li>Create a simple example;</li>\n<li>Use <a href=\"https://github.com/sw-yx/async-render-toolbox\">async-render-toolbox</a> chrome extensions to have a visual cue of the CPU lag;</li>\n<li>Create a counter to make sure page is still interactive while processing a queue;</li>\n<li>Use devtools for some extra performance inspection;</li>\n</ul>\n<h1>Test case</h1>\n<p>A spreadsheet in which A1=99 and each row from A2 to A2000000 adds 10 the previous row. A2 will be computed to 109, A3 to 119, etc. A2000000 will be <code class=\"language-text\">99 + (10 * 1 999 999) = 20 000 089</code>. As you can imagine, changing the value of A1 will have a ripple effect and 1999 calcs would have to be done, <strong>sequentially</strong>. </p>\n<p>We need to define a datastructure and a traversal algorithm to test our solutions. Since the problem we’re tackling is only related with high CPU usage, we can easily create this scenario without a complex algorithm or data strucuture. Given a object with each cell indexed by id, we’re going to start computation by the cell A1 and then get the next child until we find a cell without child.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">A1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">'A1'</span><span class=\"token punctuation\">,</span>\n    child<span class=\"token punctuation\">:</span> <span class=\"token string\">'A2'</span><span class=\"token punctuation\">,</span>\n    formula<span class=\"token punctuation\">:</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token number\">99</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">A2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">'A2'</span><span class=\"token punctuation\">,</span>\n    child<span class=\"token punctuation\">:</span> <span class=\"token string\">'A3'</span><span class=\"token punctuation\">,</span>\n    formula<span class=\"token punctuation\">:</span> <span class=\"token string\">'=A1+10'</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token constant\">A2000000</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">'A2000000'</span><span class=\"token punctuation\">,</span>\n    child<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    formula<span class=\"token punctuation\">:</span> <span class=\"token string\">'=A1999999+10'</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In each iteration we’re going to update the value of the cell and then move to the next one.</p>\n<h1>Approaches</h1>\n<p>There are a few possible aproaches, but for this blog post I would like to explore one in particular, the usage of <strong>cpu idle callbacks to schedule work</strong>.</p>\n<p>This is our dummy computation function. It will extract the id of the previous cell from the formula, add 10 and update the current cell value: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> formula <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> nextUnitOfWork<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>formula <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> parentId <span class=\"token operator\">=</span> formula<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/A\\d*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hardcoded stuff</span>\n        <span class=\"token keyword\">const</span> previousValue <span class=\"token operator\">=</span> spreadsheet<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>parentId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> newValue <span class=\"token operator\">=</span> previousValue <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        spreadsheet<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>nextUnitOfWork<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextUnitOfWork<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> triggerId<span class=\"token punctuation\">:</span> nextUnitOfWork<span class=\"token punctuation\">.</span>triggerId<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">:</span> spreadsheet<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>nextUnitOfWork<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>How we would do this with a regular iteration:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> currentCell<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> nextUnitOfWork <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>currentCell<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> nextUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>With a simple requestIdleCallback scheduler:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">resetNextUnitOfWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>task<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> triggerId<span class=\"token punctuation\">:</span> task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> task <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span>deadline<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextUnitOfWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resetNextUnitOfWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextUnitOfWork <span class=\"token operator\">&amp;&amp;</span> deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token constant\">ENOUGH_TIME</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">performWork</span><span class=\"token punctuation\">(</span>deadline<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span>deadline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextUnitOfWork <span class=\"token operator\">||</span> workQueue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>performWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">scheduleWork</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Verify if there is already a work being process that was triggered by the same cell</span>\n  <span class=\"token keyword\">const</span> isInProgress <span class=\"token operator\">=</span> nextUnitOfWork <span class=\"token operator\">&amp;&amp;</span> nextUnitOfWork<span class=\"token punctuation\">.</span>triggerId <span class=\"token operator\">===</span> task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>performWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Results</h1>\n<p>As </p>\n<div class=\"gallery\">\n  <div class=\"gallery__item\">\n    <img src=\"/idle-radar-only-302b9a609f2bf8289228abbb0fe1145b.gif\">\n    <label><strong>fig. 1:</strong> with idle callback</label>\n  </div>\n  <div class=\"gallery__item\">\n    <img src=\"/regular-radar-only-e38b913c481a88a368c2d2506b584554.gif\">\n    <label>fig 2: with blocking iteration</label>\n  </div>\n</div>","frontmatter":{"title":"Heavy browser computation at dashdash","subtitle":"Schedule work with requestIdleCallback","date":"January 11, 2019"}}},"pageContext":{"tags":[{"text":"javascript","link":"/tags/javascript/"},{"text":"dashdash","link":"/tags/dashdash/"}],"slug":"/2019-01-11---heavy-browser-computation/","previous":{"fields":{"slug":"/2019-01-09---ts-extend-modify/"},"frontmatter":{"title":"Typescript - Extending and modifying existing types with Mapped Types","path":"/ts-mapped-types","tags":["react","typescript"]}},"next":null}}