{"version":3,"sources":["webpack:///./src/pages/tags.js"],"names":["__webpack_require__","r","__webpack_exports__","Glamor","d","pageQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","n","gatsby__WEBPACK_IMPORTED_MODULE_2__","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_3__","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_3___default","_components_Bio__WEBPACK_IMPORTED_MODULE_4__","_components_Layout__WEBPACK_IMPORTED_MODULE_5__","_components_Seo__WEBPACK_IMPORTED_MODULE_6__","TagsPage","_ref","data","location","group","allMarkdownRemark","_data$site$siteMetada","site","siteMetadata","title","keywords","createElement","map","tag","key","fieldValue","to","kebabCase","totalCount","propTypes","PropTypes","shape","arrayOf","string","isRequired","number","object"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,SAAAC,GAAAH,EAAAI,EAAAF,EAAA,8BAAAG,IAAAL,EAAA,OAAAM,EAAAN,EAAA,GAAAO,EAAAP,EAAAQ,EAAAF,GAAAG,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KAAAW,EAAAX,EAAAQ,EAAAE,GAAAE,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,KAAAc,EAAAd,EAAA,KAiBMe,EAAW,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,SACdC,EAASF,EAAKG,kBAAdD,MAD4BE,EAETJ,EAAKK,KAAKC,aAA7BC,EAF4BH,EAE5BG,MAAOC,EAFqBJ,EAErBI,SAEd,OACItB,EAAAuB,cAACb,EAAA,EAAD,CAAQK,SAAUA,EAAUM,MAAOA,GAC/BrB,EAAAuB,cAACZ,EAAA,EAAD,CAAKU,MAAM,WAAWC,SAAUA,IAChCtB,EAAAuB,cAACd,EAAA,EAAD,MACAT,EAAAuB,cAAA,WACIvB,EAAAuB,cAAA,kBACAvB,EAAAuB,cAAA,UACKP,EAAMQ,IAAI,SAAAC,GAAG,OACVzB,EAAAuB,cAAA,MAAIG,IAAKD,EAAIE,YACT3B,EAAAuB,cAACjB,EAAA,KAAD,CAAMsB,GAAE,SAAWC,IAAUJ,EAAIE,YAAzB,KACHF,EAAIE,WADT,KACuBF,EAAIK,WAD3B,YAW5BlB,EAASmB,UAAY,CACjBjB,KAAMkB,IAAUC,MAAM,CAClBhB,kBAAmBe,IAAUC,MAAM,CAC/BjB,MAAOgB,IAAUE,QAAQF,IAAUC,MAAM,CACrCN,WAAYK,IAAUG,OAAOC,WAC7BN,WAAYE,IAAUK,OAAOD,aAC9BA,cAEPjB,KAAMa,IAAUC,MAAM,CAClBb,aAAcY,IAAUC,MAAM,CAC1BZ,MAAOW,IAAUG,OAAOC,iBAIpCrB,SAAUiB,IAAUM,OAAOF,YAGhBxB,YAER,IAAMV,EAAS","file":"component---src-pages-tags-js-0e6cda62967f3581acb9.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link, graphql} from 'gatsby';\n\n// Utilities\nimport kebabCase from 'lodash/kebabCase';\n\n// Components\nimport Bio from '../components/Bio';\nimport Layout from '../components/Layout';\nimport SEO from '../components/Seo';\n\n/**\n *\n * @param {Object} props - props\n * @returns {React.ReactNode} - node\n */\nconst TagsPage = ({data, location}) => {\n    const {group} = data.allMarkdownRemark;\n    const {title, keywords} = data.site.siteMetadata;\n\n    return (\n        <Layout location={location} title={title}>\n            <SEO title=\"All tags\" keywords={keywords} />\n            <Bio />\n            <div>\n                <h4>Tags</h4>\n                <ul>\n                    {group.map(tag => (\n                        <li key={tag.fieldValue}>\n                            <Link to={`/tags/${kebabCase(tag.fieldValue)}/`}>\n                                {tag.fieldValue} ({tag.totalCount})\n                            </Link>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </Layout>\n    );\n};\n\nTagsPage.propTypes = {\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            group: PropTypes.arrayOf(PropTypes.shape({\n                fieldValue: PropTypes.string.isRequired,\n                totalCount: PropTypes.number.isRequired\n            }).isRequired)\n        }),\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                title: PropTypes.string.isRequired\n            })\n        })\n    }),\n    location: PropTypes.object.isRequired\n};\n\nexport default TagsPage;\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n                keywords\n            }\n        }\n        allMarkdownRemark(limit: 2000, filter: {frontmatter: {draft: {ne: true}}}) {\n            group(field: frontmatter___tags) {\n                fieldValue\n                totalCount\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}