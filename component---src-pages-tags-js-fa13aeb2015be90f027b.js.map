{"version":3,"sources":["webpack:///./src/pages/tags.js"],"names":["TagsPage","_ref","data","location","group","allMarkdownRemark","_data$site$siteMetada","site","siteMetadata","title","keywords","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_ThemeProvider__WEBPACK_IMPORTED_MODULE_4__","_components_Layout__WEBPACK_IMPORTED_MODULE_6__","_components_Seo__WEBPACK_IMPORTED_MODULE_7__","_components_Bio__WEBPACK_IMPORTED_MODULE_5__","map","tag","key","fieldValue","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","kebabCase","totalCount","pageQuery"],"mappings":"0NA2DeA,UA5CE,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,SACdC,EAASF,EAAKG,kBAAdD,MAD4BE,EAETJ,EAAKK,KAAKC,aAA7BC,EAF4BH,EAE5BG,MAAOC,EAFqBJ,EAErBI,SAEd,OACIC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,KACIF,OAAAC,EAAA,EAAAD,CAACG,EAAA,EAAD,CAAQX,SAAUA,EAAUM,MAAOA,GAC/BE,OAAAC,EAAA,EAAAD,CAACI,EAAA,EAAD,CAAKN,MAAM,WAAWC,SAAUA,IAChCC,OAAAC,EAAA,EAAAD,CAACK,EAAA,EAAD,MACAL,OAAAC,EAAA,EAAAD,CAAA,YACIA,OAAAC,EAAA,EAAAD,CAAA,kBACAA,OAAAC,EAAA,EAAAD,CAAA,UACKP,EAAMa,IAAI,SAAAC,GAAG,OACVP,OAAAC,EAAA,EAAAD,CAAA,MAAIQ,IAAKD,EAAIE,YACTT,OAAAC,EAAA,EAAAD,CAACU,EAAA,EAAD,CAAMC,GAAE,SAAWC,IAAUL,EAAIE,YAAzB,KACHF,EAAIE,WADT,KACuBF,EAAIM,WAD3B,aAgCzB,IAAMC,EAAS","file":"component---src-pages-tags-js-fa13aeb2015be90f027b.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link, graphql} from 'gatsby';\nimport kebabCase from 'lodash/kebabCase';\n\nimport ThemeProvider from '../components/ThemeProvider';\nimport Bio from '../components/Bio';\nimport Layout from '../components/Layout';\nimport SEO from '../components/Seo';\n\n/**\n *\n * @param {Object} props - props\n * @returns {React.ReactNode} - node\n */\nconst TagsPage = ({data, location}) => {\n    const {group} = data.allMarkdownRemark;\n    const {title, keywords} = data.site.siteMetadata;\n\n    return (\n        <ThemeProvider>\n            <Layout location={location} title={title}>\n                <SEO title=\"All tags\" keywords={keywords} />\n                <Bio />\n                <main>\n                    <h4>Tags</h4>\n                    <ul>\n                        {group.map(tag => (\n                            <li key={tag.fieldValue}>\n                                <Link to={`/tags/${kebabCase(tag.fieldValue)}/`}>\n                                    {tag.fieldValue} ({tag.totalCount})\n                                </Link>\n                            </li>\n                        ))}\n                    </ul>\n                </main>\n            </Layout>\n        </ThemeProvider>\n    );\n};\n\nTagsPage.propTypes = {\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            group: PropTypes.arrayOf(PropTypes.shape({\n                fieldValue: PropTypes.string.isRequired,\n                totalCount: PropTypes.number.isRequired\n            }).isRequired)\n        }),\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n                keywords: PropTypes.arrayOf(PropTypes.string)\n            })\n        })\n    }),\n    location: PropTypes.object.isRequired\n};\n\nexport default TagsPage;\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n                keywords\n            }\n        }\n        allMarkdownRemark(limit: 2000, filter: {frontmatter: {draft: {ne: true}}}) {\n            group(field: frontmatter___tags) {\n                fieldValue\n                totalCount\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}