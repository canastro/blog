{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/utils/theme.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/utils/typography.js","webpack:///./src/components/Layout.js","webpack:///./src/components/Seo.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Bio.js"],"names":["Tags","_ref","pageContext","data","location","siteTitle","site","siteMetadata","title","tag","_data$allMarkdownRema","allMarkdownRemark","edges","totalCount","tagHeader","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_Layout__WEBPACK_IMPORTED_MODULE_4__","_components_Seo__WEBPACK_IMPORTED_MODULE_5__","description","_components_Bio__WEBPACK_IMPORTED_MODULE_6__","map","_ref2","_node$frontmatter","node","frontmatter","path","key","gatsby__WEBPACK_IMPORTED_MODULE_3__","to","propTypes","PropTypes","shape","string","isRequired","number","arrayOf","object","pageQuery","StaticQueryContext","React","createContext","StaticQuery","props","Consumer","staticQueryData","query","render","children","graphql","Error","func","__webpack_require__","d","__webpack_exports__","palette","text","primary","orange","gray","white","color","subtitle","link","body","blockquote","m","module","exports","require","default","Wordpress2016","overrideThemeStyles","h1","h2, h3, h4","a","a.gatsby-resp-image-link","boxShadow","googleFonts","typography","Typography","scale","value","scaled","css","fontSize","lineHeight","rhythm","globalStyles","styles","root","h3","name","Layout","header","__PATH_PREFIX__","pathname","startsWith","_emotion_core__WEBPACK_IMPORTED_MODULE_2__","gatsby__WEBPACK_IMPORTED_MODULE_5__","any","SEO","lang","meta","keywords","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","htmlAttributes","titleTemplate","content","property","author","concat","length","join","_public_static_d_4017075492_json__WEBPACK_IMPORTED_MODULE_1__","defaultProps","array","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","createElement","InternalPageRenderer","assign","json","social","Bio","href","twitter","react_icons_fa__WEBPACK_IMPORTED_MODULE_4__","linkedin","stackoverflow","_public_static_d_3268991543_json__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"component---src-templates-tags-js-e526b40d01d87fedb2d3.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link, graphql} from 'gatsby';\n\n// Components\nimport Layout from '../components/Layout';\nimport SEO from '../components/Seo';\nimport Bio from '../components/Bio';\n\n/**\n * Tags page\n * @param {Object} props - props\n * @returns {React.ReactNode} tags page\n */\nconst Tags = ({pageContext, data, location}) => {\n    const {title: siteTitle} = data.site.siteMetadata;\n    const {tag} = pageContext;\n    const {edges, totalCount} = data.allMarkdownRemark;\n    const tagHeader = `${totalCount} post${totalCount === 1 ? '' : 's'} tagged with \"${tag}\"`;\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <SEO title={tag} description={tagHeader} />\n            <Bio />\n            <h4>{tagHeader}</h4>\n            <ul>\n                {edges.map(({node}) => {\n                    const {path, title} = node.frontmatter;\n                    return (\n                        <li key={path}>\n                            <Link to={path}>{title}</Link>\n                        </li>\n                    );\n                })}\n            </ul>\n            {/*\n              This links to a page that does not yet exist.\n              We'll come back to it!\n            */}\n            <Link to=\"/tags\">All tags</Link>\n        </Layout>\n    );\n};\n\nTags.propTypes = {\n    pageContext: PropTypes.shape({\n        tag: PropTypes.string.isRequired\n    }),\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            totalCount: PropTypes.number.isRequired,\n            edges: PropTypes.arrayOf(PropTypes.shape({\n                node: PropTypes.shape({\n                    frontmatter: PropTypes.shape({\n                        path: PropTypes.string.isRequired,\n                        title: PropTypes.string.isRequired\n                    })\n                })\n            }).isRequired)\n        }),\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                title: PropTypes.string.isRequired\n            })\n        })\n    }),\n    location: PropTypes.object.isRequired\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n    query($tag: String) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(\n            limit: 2000\n            sort: {fields: [frontmatter___date], order: DESC}\n            filter: {frontmatter: {tags: {in: [$tag]}}}\n        ) {\n            totalCount\n            edges {\n                node {\n                    frontmatter {\n                        path\n                        title\n                    }\n                }\n            }\n        }\n    }\n`;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","export const palette = {\n    primary: '#222222',\n    orange: '#f29d0b',\n    gray: '#f1f5f7',\n    white: '#fff'\n};\n\nexport const text = {\n    title: {color: palette.white},\n    subtitle: {color: palette.white},\n    link: {color: palette.orange},\n    body: {color: palette.gray},\n    blockquote: {color: palette.gray}\n};\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import Typography from 'typography';\nimport Wordpress2016 from 'typography-theme-wordpress-2016';\nimport {css} from '@emotion/core';\nimport {text} from './theme';\n\nWordpress2016.overrideThemeStyles = () => ({\n    h1: {\n        color: text.title.color\n    },\n    'h2, h3, h4': {\n        color: text.subtitle.color\n    },\n    blockquote: {\n        color: text.blockquote.color\n    },\n    a: {\n        color: text.link.color\n    },\n    'a.gatsby-resp-image-link': {\n        boxShadow: 'none'\n    }\n});\n\ndelete Wordpress2016.googleFonts;\n\nconst typography = new Typography(Wordpress2016);\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== 'production') {\n    typography.injectStyles();\n}\n\n/**\n * Scales a text\n * @param {Number} value - text scale\n * @returns {String} css\n */\nexport const scale = (value) => {\n    const scaled = typography.scale(value);\n\n    return css`\n        font-size: ${scaled.fontSize};\n        line-height: ${scaled.lineHeight};\n    `;\n};\n\nexport const {rhythm} = typography;\nexport default typography;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'gatsby';\nimport {css, Global} from '@emotion/core';\n\nimport 'prismjs/themes/prism-okaidia.css';\nimport './prism.css';\nimport {palette, text} from '../utils/theme';\nimport {rhythm, scale} from '../utils/typography';\n\nconst globalStyles = css`\n    body {\n        background: ${palette.primary};\n        color: ${text.body.color};\n    }\n`;\n\nconst styles = {\n    root: css`\n        margin-left: auto;\n        margin-right: auto;\n        max-width: ${rhythm(30)};\n        padding: ${rhythm(1.5)} ${rhythm(3 / 4)};\n    `,\n    h1: css`\n        ${scale(1.25)}\n        margin-bottom: ${rhythm(1)};\n        margin-top: 0;\n    `,\n    h3: css`\n        font-family: Montserrat, sans-serif;\n        margin-top: 0;\n        margin-bottom: ${rhythm(-1)};\n    `,\n    link: css`\n        box-shadow: none;\n        text-decoration: none;\n        color: inherit;\n    `\n};\n\n/**\n * Builds the base page layout\n * @param {Object} props - component props\n * @returns {React.ReactNode} - node\n */\nconst Layout = ({location, title, children}) => {\n    const rootPath = `${__PATH_PREFIX__}/`;\n    const tagsPath = `${__PATH_PREFIX__}/tags`;\n    let header;\n\n    if (rootPath === location.pathname || location.pathname.startsWith(tagsPath)) {\n        header = (\n            <h1 css={styles.h1}>\n                <Link css={styles.link} to=\"/\">\n                    {title}\n                </Link>\n            </h1>\n        );\n    } else {\n        header = (\n            <h3 css={styles.h3}>\n                <Link css={styles.link} to=\"/\">\n                    {title}\n                </Link>\n            </h3>\n        );\n    }\n    return (\n        <div css={styles.root}>\n            <Global styles={globalStyles} />\n            {header}\n            {children}\n        </div>\n    );\n};\n\nLayout.propTypes = {\n    location: PropTypes.object.isRequired,\n    title: PropTypes.string.isRequired,\n    children: PropTypes.any.isRequired\n};\n\nexport default Layout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport {StaticQuery, graphql} from 'gatsby';\n\nconst detailsQuery = graphql`\n    query DefaultSEOQuery {\n        site {\n            siteMetadata {\n                title\n                description\n                author\n            }\n        }\n    }\n`;\n\n/**\n * Updates header for SEO purposes\n * @param {Object} props - component props\n * @returns {React.ReactNode} - node\n */\nconst SEO = ({\n    description, lang, meta, keywords, title\n}) => (\n    <StaticQuery\n        query={detailsQuery}\n        render={(data) => {\n            const metaDescription = description || data.site.siteMetadata.description;\n            return (\n                <Helmet\n                    htmlAttributes={{\n                        lang\n                    }}\n                    title={title}\n                    titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n                    meta={[\n                        {\n                            name: 'description',\n                            content: metaDescription\n                        },\n                        {\n                            property: 'og:title',\n                            content: title\n                        },\n                        {\n                            property: 'og:description',\n                            content: metaDescription\n                        },\n                        {\n                            property: 'og:type',\n                            content: 'website'\n                        },\n                        {\n                            name: 'twitter:card',\n                            content: 'summary'\n                        },\n                        {\n                            name: 'twitter:creator',\n                            content: data.site.siteMetadata.author\n                        },\n                        {\n                            name: 'twitter:title',\n                            content: title\n                        },\n                        {\n                            name: 'twitter:description',\n                            content: metaDescription\n                        }\n                    ]\n                        .concat(keywords.length > 0\n                            ? {\n                                name: 'keywords',\n                                content: keywords.join(', ')\n                            }\n                            : [])\n                        .concat(meta)}\n                />\n            );\n        }}\n    />\n);\n\nSEO.defaultProps = {\n    lang: 'en',\n    meta: [],\n    keywords: []\n};\n\nSEO.propTypes = {\n    description: PropTypes.string,\n    lang: PropTypes.string,\n    meta: PropTypes.array,\n    keywords: PropTypes.arrayOf(PropTypes.string),\n    title: PropTypes.string.isRequired\n};\n\nexport default SEO;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react';\nimport {StaticQuery, graphql} from 'gatsby';\nimport {FaTwitter, FaStackOverflow, FaLinkedin} from 'react-icons/fa';\nimport {css} from '@emotion/core';\n\nimport {rhythm} from '../utils/typography';\n\nconst styles = {\n    root: css`\n        display: flex;\n        flex-direction: column;\n        margin-bottom: ${rhythm(1)};\n    `,\n    social: css`\n        display: flex;\n        justify-content: space-around;\n        width: 150px;\n        align-self: center;\n    `\n};\n\nconst bioQuery = graphql`\n    query BioQuery {\n        site {\n            siteMetadata {\n                author\n                social {\n                    linkedin\n                    stackoverflow\n                    twitter\n                }\n            }\n        }\n    }\n`;\n\n/**\n * Builds the Bio section\n * @returns {React.ReactNode} node\n */\nconst Bio = () => (\n    <StaticQuery\n        query={bioQuery}\n        render={(data) => {\n            const {social} = data.site.siteMetadata;\n            return (\n                <div css={styles.root}>\n                    <div css={styles.social}>\n                        <a title=\"twitter\" href={social.twitter}>\n                            <FaTwitter />\n                        </a>\n                        <a title=\"linkedin\" href={social.linkedin}>\n                            <FaLinkedin />\n                        </a>\n                        <a title=\"stackoverflow\" href={social.stackoverflow}>\n                            <FaStackOverflow />\n                        </a>\n                    </div>\n                </div>\n            );\n        }}\n    />\n);\n\nexport default Bio;\n"],"sourceRoot":""}